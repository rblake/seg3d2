/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2009 Scientific Computing and Imaging Institute,
   University of Utah.

   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

#ifndef APPLICATION_ACTION_ACTIONUNDOBUFFER_H
#define APPLICATION_ACTION_ACTIONUNDOBUFFER_H

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
# pragma once
#endif 

// STL includes
#include <list>

// Boost includes
#include <boost/shared_ptr.hpp>
#include <boost/utility.hpp>

// Core includes
#include <Utils/Core/StringUtil.h>
#include <Utils/Singleton/Singleton.h>

// Application includes
#include <Application/Action/Action.h>
#include <Application/Action/ActionUndoItem.h>

namespace Seg3D {

// CLASS ACTIONUNDOBUFFER:
// Singleton undo/redo buffer that encapsulates the general undo/redo buffer
// of the program.

// Forward declaration
class ActionUndoBuffer;  

// Class definition
class ActionUndoBuffer : public boost::noncopyable {

// -- Constructor --

  private:
    friend class Utils::Singleton<ActionUndoBuffer>;
    ActionUndoBuffer();

  public:
    virtual ~ActionUndoBuffer();

// -- Add undo/redo action --
  public:
  
    // ADD_ITEM:
    // Add a new entry in the undo/redo buffer
  
    void add_undo_action(std::string& undo_tag,
                  ActionHandleList& undo_actions,
                  ActionHandle& redo_action);
    
// -- Query last undo action --

    // QUERY_CURRENT_UNDO_ITEM:
    // Access to the last undo item, so actions that stack on top of previous
    // ones can be grouped together.
    bool query_current_undo_action(ActionUndoItemHandle undo_action);


// -- undo/redo actions --
  protected:
    friend class ActionUndo;
    friend class ActionRedo;
    
    // UNDO_ACTION:
    // Undo the last action
    void undo_action(ActionContextHandle& context);
    
    // REDO_ACTION
    // Redo the last undone action
    void redo_action(ActionContextHandle& context);
    
    // HAS_UNDO_ACTION:
    // Check whether the backward buffer has any actions that can be undone
    bool has_undo_action();
    
    // HAS_REDO_ACTION:
    // Check whether the forward buffer has any actions that can be redone
    bool has_redo_action();
  
  public:
  
    // SET_UNDO_BUFFER_SIZE:
    // The length of the undo buffer
    void set_undo_buffer_size(size_t size);
  
  protected:

    // The undo/redo buffer has its own action play system that the
    // observers cannot monitor. The main observer only sees the
    // Undo command or the Redo command pass by.
    void run_action(ActionHandle action, 
                    ActionContextHandle action_context);      
        
  private:

    typedef std::list<ActionUndoItemHandle> undo_buffer_type;

    // This buffer lists the actions that can be undone
    undo_buffer_type backward_buffer_;
    // This buffer lists the actions that can be redone
    undo_buffer_type forward_buffer_;
    // The size of the undo buffer
    size_t undo_buffer_size_;
    
    boost::mutex buffer_mutex_;


// -- Signal/Slots --
  protected:
  
    // NOTE:
    // This signal is managed by the ActionManager, but needs to be created here
    // as this signal is generated by the ActionUndoBuffer.
    
    friend class ActionManager;
    typedef boost::signals2::signal<void (std::string,std::string)> tags_changed_type;

    // SIGNAL TAGS_CHANGED:
    // This signal is send when the undo/redo tags are changed
    tags_changed_type tags_changed_;  

    // TAGS_CHANGED
    // function that triggers the signal that tells when new tags are ready for
    // labeling the undo/redo state of the program.
    void tags_changed();
  

// -- Singleton interface --
  public:
    
    static ActionUndoBuffer* Instance() { return instance_.instance(); }

  private:
    static Utils::Singleton<ActionUndoBuffer> instance_;

};

void
AddUndoAction(std::string undo_tag, ActionHandle undo, ActionHandle redo);

void
AddUndoAction(std::string undo_tag, ActionHandle undo1, 
              ActionHandle undo2, ActionHandle redo);

void
AddUndoAction(std::string undo_tag, ActionHandle undo1, 
              ActionHandle undo2, ActionHandle undo3,
              ActionHandle redo);

void
AddUndoAction(std::string undo_tag, ActionHandleList& undo_list, 
              ActionHandle redo);

} // end namespace seg3D

#endif
