/*
 For more information, please see: http://software.sci.utah.edu
 
 The MIT License
 
 Copyright (c) 2013 Scientific Computing and Imaging Institute,
 University of Utah.
 
 
 Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
 */
#ifdef _WIN32

#include <windows.h>

#endif

#include <fstream>
#include <iostream>

// Application includes
#include <Application/LayerIO/HISLayerImporter.h>

#include <Application/Layer/DataLayer.h> 
#include <Application/LayerIO/LayerIO.h>

// Core includes
#include <Core/DataBlock/StdDataBlock.h>
#include <Core/Utils/Log.h>

#define DATA_BLOCK_START_INDEX 100

#pragma pack(push, 1)
typedef struct {
  // TODO: works on OSX
  // test Windows builds and go to std c++ types if OK
#ifdef _WIN32  
  WORD FileType;
  WORD HeaderSize;
  WORD headerVersion;
  ULONG FileSize;
  WORD ImageHeaderSize;
  WORD ULX, ULY, BRX, BRY;
  WORD NrOfFrames;
  WORD Correction;
  double IntegrationTime;
  WORD TypeOfNumbers;
#else
  short int FileType;
  short int HeaderSize;
  short int headerVersion;
  unsigned int FileSize;
  short int ImageHeaderSize;
  short int ULX, ULY, BRX, BRY;
  short int NrOfFrames;
  short int Correction;
  double IntegrationTime;
  short int TypeOfNumbers;
#endif
} file_header_t;
#pragma pack(pop)

SEG3D_REGISTER_IMPORTER( Seg3D, HISLayerImporter );

namespace Seg3D
{
  class HISLayerImporterPrivate : public boost::noncopyable
{
public:
  HISLayerImporterPrivate()
    : importer_(0),
      data_type_( Core::DataType::UNKNOWN_E ),
      read_header_( false ),
      read_data_( false )
  {}

  // Datablock that was extracted
  Core::DataBlockHandle data_block_;
  
  // Grid transform that was extracted
  Core::GridTransform	grid_transform_;
  
  // Type of the pixels in the file
  Core::DataType data_type_;
  
  // Meta data (generated by read_data)
  LayerMetaData meta_data_;
  
  // Whether the header has been read
  bool read_header_;
  
  // Whether the data has been read
  bool read_data_;

  // READ_HEADER
  // Read the header of the file
  bool read_header();
  
  // READ_DATA
  // Read the data from the file
  bool read_data();
  
  HISLayerImporter* importer_;
  file_header_t header_;
  
private:
  std::string getString()
  {
    std::ostringstream oss;
    oss << this->header_.FileType << " "
    << this->header_.HeaderSize << " "
    << this->header_.headerVersion << " "
    << this->header_.FileSize << " "
    << this->header_.ImageHeaderSize << " "
    << this->header_.ULX << " "
    << this->header_.ULY << " "
    << this->header_.BRX << " "
    << this->header_.BRY << " "
    << this->header_.NrOfFrames << " "
    << this->header_.Correction << " "
    << this->header_.IntegrationTime << " "
    << this->header_.TypeOfNumbers;
    return oss.str();
  }
};

bool HISLayerImporterPrivate::read_header()
{
  // If read it before, we do need read it a second time.
  if ( this->read_header_ ) return true;

  
  std::ifstream::pos_type size = 0;
  
  std::ifstream in(this->importer_->get_filename().c_str(), std::ios::in | std::ios::binary);
  if (! in )
  {
    std::ostringstream oss;
    oss << "Failed to open file " << this->importer_->get_filename().c_str();
    this->importer_->set_error( oss.str() );
    return false;
  }
  
  const size_t HEADER_SIZE = sizeof(file_header_t);
  
  std::cerr << "sizeof(file_header_t)=" << sizeof(file_header_t) << std::endl;
  std::cerr << "sizeof(in_file_header)=" << sizeof(this->header_) << std::endl;
  
  char *headerdata = new char[HEADER_SIZE];
  if (! headerdata)
  {
    this->importer_->set_error( "Error allocating data for input file" );
    return false;
  }
  in.read(headerdata, HEADER_SIZE);
  memcpy(&this->header_, headerdata, HEADER_SIZE);
  delete [] headerdata;
  
  if (this->header_.TypeOfNumbers & 4)
  {
    std::cerr << "detected 16 bit integer" << std::endl;
    this->data_type_ = Core::DataType::SHORT_E;
    //type = "short";
  }
  else if (this->header_.TypeOfNumbers & 2)
  {
    //CORE_LOG_DEBUG();
    std::cerr << "detected 64 bit float" << std::endl;
    this->data_type_ = Core::DataType::DOUBLE_E;
    //type = "double";
  }
  else if (this->header_.TypeOfNumbers & 32)
  {
    std::cerr << "detected 32 bit int" << std::endl;
    this->data_type_ = Core::DataType::INT_E;
    //type = "int";
  }
  else
  {
    std::cerr << "unknown type" << std::endl;
    this->importer_->set_error( "Unknown file type in header (TypeOfNumbers)" );
    return 1;
  }

  // TODO: confirm this!!!
  Core::Point origin;
  std::vector<size_t> dims(3);
  dims[0] = this->header_.BRX;
  dims[1] = this->header_.BRY;
  dims[2] = this->header_.NrOfFrames;
  
  std::cerr << "header:" << std::endl << getString() << std::endl;

  // TODO: spacing?
  Core::Vector spacing(1, 1, 1);
  Core::Transform transform(origin,
                            Core::Vector( spacing.x(), 0.0 , 0.0 ),
                            Core::Vector( 0.0, spacing.y(), 0.0 ),
                            Core::Vector( 0.0, 0.0, spacing.z() ));
  this->grid_transform_ = Core::GridTransform( dims[ 0 ], dims[ 1 ], dims[ 2 ], transform );
  this->grid_transform_.set_originally_node_centered( false );
  this->meta_data_.meta_data_info_ = "HIS header";
  this->meta_data_.meta_data_ = getString();
  
  in.close();

  this->read_header_ = true;
  return true;
}


bool HISLayerImporterPrivate::read_data()
{
  if ( this->read_data_ ) return true;
  
  // Ensure that we read the header of this file.
  if ( ! this->read_header() ) 
  {
    this->importer_->set_error( "Failed to read header of HIS file." );
    return false;
  }

  // Generate a new data block
  this->data_block_ = Core::StdDataBlock::New( this->grid_transform_.get_nx(), 
                                               this->grid_transform_.get_ny(),
                                               this->grid_transform_.get_nz(),
                                               this->data_type_ );
  
  // We need to check if we could allocate the destination datablock
  if ( !this->data_block_ )
  {
    this->importer_->set_error( "Could not allocate enough memory to read HIS file." );
    return false;
  }

  std::ifstream::pos_type size = 0;
  
  std::ifstream in(this->importer_->get_filename().c_str(), std::ios::in | std::ios::binary);
  if (! in )
  {
    std::ostringstream oss;
    oss << "Failed to open file " << this->importer_->get_filename().c_str();
    this->importer_->set_error( oss.str() );
    return false;
  }
  
  in.seekg(0, std::ios::end);
  const size_t INSIZE = in.tellg();
  in.seekg(0, std::ios::beg);

  char *data = new char[INSIZE];
  if (! data)
  {
    this->importer_->set_error( "error allocating data for input file" );
    return false;
  }
  
  in.read(data, INSIZE);    
  in.close();

  this->data_block_->set_data(&data[DATA_BLOCK_START_INDEX]);

  this->read_data_ = true;
  return true;
}
    
//////////////////////////////////////////////////////////////////////////
// Class HISLayerImporter
//////////////////////////////////////////////////////////////////////////

HISLayerImporter::HISLayerImporter() :
private_( new HISLayerImporterPrivate )
{
  // Ensure that the private class has a pointer back into this class.
  this->private_->importer_ = this;
}

HISLayerImporter::~HISLayerImporter()
{
}

bool HISLayerImporter::get_file_info( LayerImporterFileInfoHandle& info )
{
  try
  {	
    // Try to read the header
    if ( ! this->private_->read_header() ) return false;
    
    // Generate an information structure with the information.
    info = LayerImporterFileInfoHandle( new LayerImporterFileInfo );
    info->set_data_type( this->private_->data_type_ );
    info->set_grid_transform( this->private_->grid_transform_ );
    info->set_file_type( "his" ); 
    info->set_mask_compatible( true );
  }
  catch ( ... )
  {
    // In case something failed, recover from here and let the user
    // deal with the error. 
    this->set_error( "HIS Importer crashed while reading file." );
    return false;
  }
  
  return true;
}


bool HISLayerImporter::get_file_data( LayerImporterFileDataHandle& data )
{
  try
  {	
    // Read the data from the file
    if ( !this->private_->read_data() ) return false;
    
    // Create a data structure with handles to the actual data in this file	
    data = LayerImporterFileDataHandle( new LayerImporterFileData );
    data->set_data_block( this->private_->data_block_ );
    data->set_grid_transform( this->private_->grid_transform_ );
    data->set_name( this->get_file_tag() );
    data->set_meta_data( this->private_->meta_data_ );
  }
  catch ( ... )
  {
    // In case something failed, recover from here and let the user
    // deal with the error. 
    this->set_error( "HIS Importer crashed when reading file." );
    return false;
  }
  
  return true;
}

  
}