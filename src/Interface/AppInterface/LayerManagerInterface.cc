/*
   For more information, please see: http://software.sci.utah.edu

   The MIT License

   Copyright (c) 2009 Scientific Computing and Imaging Institute,
   University of Utah.

   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/
#include <sstream>
#include <iostream>

#include <Core/Utils/Log.h>

#include <Interface/AppInterface/LayerManagerInterface.h>

// Include the interface designed with the QT Designer
#include "ui_LayerManagerInterface.h"

namespace Seg3D {

// Internals of class
class LayerManagerInterfacePrivate {
  public:
    // Main interface widget
    QWidget*                  interface_;
    
    // Interface designed by Qt designer
    Ui::UI_LayerManagerInterface ui_;
    
};

LayerManagerInterface::LayerManagerInterface(QWidget* parent) :
  // This Widget is a dockable widget
  QDockWidget("LayerManager",parent),
  private_(new LayerManagerInterfacePrivate)
{
  // Setup the defaults for this dock window
  setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea );   
  setFeatures( DockWidgetFloatable | DockWidgetMovable );


  // Set up the private internals of the LayerManagerInterface class
  if (private_) 
  {
    // Main widget that goes into the dock
    private_->interface_ = new QWidget;
    
    // Setup all the ui components that we generated by
    // the Qt Designer
    private_->ui_.setupUi(private_->interface_);
  
    // Import the widget
    setWidget(private_->interface_);

    // Setup validators on text entry widgets
    private_->ui_.worldXEdit->setValidator(
             new QIntValidator(private_->ui_.worldXEdit));
    private_->ui_.worldYEdit->setValidator(
             new QIntValidator(private_->ui_.worldYEdit));
    private_->ui_.worldZEdit->setValidator(
             new QIntValidator(private_->ui_.worldZEdit));
    private_->ui_.indexXEdit->setValidator(
             new QIntValidator(private_->ui_.indexXEdit));
    private_->ui_.indexYEdit->setValidator(
             new QIntValidator(private_->ui_.indexYEdit));
    private_->ui_.indexZEdit->setValidator(
             new QIntValidator(private_->ui_.indexZEdit));

    // Connect signals to slots
    connect(private_->ui_.worldXEdit, SIGNAL(editingFinished()),
	    this, SLOT(worldCoordsChanged()));
    connect(private_->ui_.worldYEdit, SIGNAL(editingFinished()),
	    this, SLOT(worldCoordsChanged()));
    connect(private_->ui_.worldZEdit, SIGNAL(editingFinished()),
	    this, SLOT(worldCoordsChanged()));
    connect(private_->ui_.indexXEdit, SIGNAL(editingFinished()),
	    this, SLOT(indexCoordsChanged()));
    connect(private_->ui_.indexYEdit, SIGNAL(editingFinished()),
	    this, SLOT(indexCoordsChanged()));
    connect(private_->ui_.indexZEdit, SIGNAL(editingFinished()),
	    this, SLOT(indexCoordsChanged()));

  }  
}

LayerManagerInterface::~LayerManagerInterface()
{
}

void LayerManagerInterface::worldCoordsChanged()
{
  // extract all the coordinates and create an action
  // since we provided an int validator, it should be safe
  // to read the values directly into ints

  // TODO: The signal will be sent even if the user just selects
  // the text box and then the box loses focus.  To avoid
  // unnecessary work, may want to check if the values have
  // actually changed before creating an action.
  int wx, wy, wz;
  wx = private_->ui_.worldXEdit->text().toInt();
  wy = private_->ui_.worldYEdit->text().toInt();
  wz = private_->ui_.worldZEdit->text().toInt();
  {
    std::ostringstream ss;
    ss << "Extracted World Coords, x: " << wx << ", y: " << wy 
       << ", z: " << wz;
    SCI_LOG_DEBUG(ss.str());
  }
}

void LayerManagerInterface::indexCoordsChanged()
{
  // extract all the coordinates and create an action
  // since we provided an int validator, it should be safe
  // to read the values directly into ints

  // TODO: The signal will be sent even if the user just selects
  // the text box and then the box loses focus.  To avoid
  // unnecessary work, may want to check if the values have
  // actually changed before creating an action.
  int ix, iy, iz;
  ix = private_->ui_.indexXEdit->text().toInt();
  iy = private_->ui_.indexYEdit->text().toInt();
  iz = private_->ui_.indexZEdit->text().toInt();
  {
    std::ostringstream ss;
    ss << "Extracted Index Coords, x: " << ix << ", y: " << iy 
       << ", z: " << iz;
    SCI_LOG_DEBUG(ss.str());
  }
}

} // end namespace
